#!/usr/bin/env python3
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #r
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Pierre Chaumeil"
__copyright__ = "Copyright 2019"
__credits__ = ["Donovan Parks", "Pierre Chaumeil", "Aaron Mussig"]
__license__ = "GPL3"
__maintainer__ = "Pierre Chaumeil"
__email__ = "uqpchaum@uq.edu.au"
__status__ = "Development"

import os
import sys
import ntpath
import logging
import argparse



sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


from hatchet.main import OptionsParser
from hatchet import __version__
from contextlib import contextmanager
from datetime import datetime
from hatchet.biolib_lite.logger import logger_setup
from hatchet.biolib_lite.custom_help_formatter import CustomHelpFormatter
from hatchet.biolib_lite.common import make_sure_path_exists


def print_help():
    """Help menu."""

    print('')
    print('                ...::: Hatchet v' +
          __version__ + ' :::...''')
    print('''\

    Workflow:
    pick          -> Pick one genome for a specified rank
    recreate_red  -> Regenerate RED values file for the new pruned tree.
    split         -> Split Reference tree into lower ranks subtrees
    red_low       -> Regenerate RED values file for the new low level trees.
    merge_logs    -> Merge log files. Replace last tree in log fitting with the original tree. This new log fitting
                     is used in pplacer package
    
    hatchet_wf    -> pick -> recreate_red -> split -> red_low
    


  Use: hatchet <command> -h for command specific help.

  Feature requests or bug reports can be sent to Pierre Chaumeil (uqpchaum@uq.edu.au)
    or posted on GitHub (https://github.com/Ecogenomics/hatchet).
    ''')

@contextmanager
def subparser(parser, name, desc):
    yield parser.add_parser(name, conflict_handler='resolve', help=desc,
                            formatter_class=CustomHelpFormatter)


@contextmanager
def mutex_group(parser, required):
    group = parser.add_argument_group(f'mutually exclusive '
                                      f'{"required" if required else "optional"} '
                                      f'arguments')
    yield group.add_mutually_exclusive_group(required=required)


@contextmanager
def arg_group(parser, name):
    yield parser.add_argument_group(name)


def valid_date(s):
    try:
        return datetime.strptime(s, "%Y-%m-%d")
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(s)
        raise argparse.ArgumentTypeError(msg)

def __domain(group, required):
    group.add_argument('-d','--domain',
                       help='Domain of interest',
                       choices=['bac', 'arc'],
                       required=required)

def __ref_tree(group, required):
    group.add_argument('-t','--ref_tree',
                       required=required,
                       help='GTDB-Tk reference tree.')

def __ref_msa(group, required):
    group.add_argument('-m','--msa',
                       required=required,
                       help='reference MSA file.')

def __taxonomy_file(group, required):
    group.add_argument('--tax','--taxonomy',
                       required=required,
                       help='Taxonomy file for the Newick tree to trim.')

def __output_dir(group,required):
    group.add_argument('-o','--out_dir',
                       required=required,
                       help='Output directory')

def __rank_of_interest(group,required):
    group.add_argument('-r', '--rank_of_interest',
                       required=required,
                       help='Rank of Interest.',
                       default='f',
                       choices=['d', 'p', 'c', 'o', 'f', 'g', 's'])
def __rank_to_split(group,required):
    group.add_argument('-r', '--rank_to_split',
                       required=required,
                       default='o',
                       help='Split Reference tree into lower ranks subtrees.',
                       choices=['d', 'p', 'c', 'o', 'f', 'g', 's'])

def __silent(group):
    group.add_argument('--silent', help="suppress output", action='store_true')

def __pruned_tree(group,required):
    group.add_argument('--pruned_tree',
                       required=required,
                        help='generated pruned tree')

def __ref_red_file(group,required):
    group.add_argument('--red_file',
                       required=required,
                        help='Original file listing the RED value for all genomes.')

def __split_trees_dir(group,required):
    group.add_argument('--split_trees_dir',
                       required=required,
                        help='Output directory from split function.')

def __output_file(group, required):
    group.add_argument('-o','--out_file', required=True,
                            help='Output file.')

def __input_log(group, required):
    group.add_argument('-i','--input_log', required=True,
                            help='Output file.')

def __output_log(group, required):
    group.add_argument('-o','--output_log', required=True,
                            help='Output file.')


def get_main_parser():
    # Setup the main, and sub parsers.
    main_parser = argparse.ArgumentParser(prog='hatchet', add_help=False, conflict_handler='resolve')
    sub_parsers = main_parser.add_subparsers(help="--", dest='subparser_name')

    # Clean FTP directory
    with subparser(sub_parsers, 'pick', 'Pick one genome for a specified rank.') as parser:
        with arg_group(parser, 'required named arguments') as grp:
            __domain(grp, required=True)
            __rank_of_interest(grp,required=True)
            __ref_tree(grp,required=True)
            __ref_msa(grp,required=True)
            __taxonomy_file(grp, required=True)
            __output_dir(grp, required=True)
        with arg_group(parser, 'options arguments') as grp:
            __silent(grp)

    with subparser(sub_parsers, 'red', 'Regenerate RED values for the new pruned tree based on the original red.') as parser:
        with arg_group(parser, 'required named arguments') as grp:
            __ref_tree(grp, required=True)
            __pruned_tree(grp, required=True)
            __ref_red_file(grp, required=True)
            __output_file(grp, required=True)
        with arg_group(parser, 'options arguments') as grp:
            __silent(grp)

    with subparser(sub_parsers, 'split', 'Split Reference tree into lower ranks subtrees.') as parser:
        with arg_group(parser, 'required named arguments') as grp:
            __ref_tree(grp, required=True)
            __ref_msa(grp, required=True)
            __taxonomy_file(grp, required=True)
            __domain(grp, required=True)
            __rank_to_split(grp, required=True)
            __output_dir(grp, required=True)
        with arg_group(parser, 'options arguments') as grp:
            __silent(grp)

    with subparser(sub_parsers, 'red_low', 'Regenerate RED values file for the new low level trees based on the original red.') as parser:
        with arg_group(parser, 'required named arguments') as grp:
            __split_trees_dir(grp, required=True)
            __ref_tree(grp, required=True)
            __ref_red_file(grp,required=True)
        with arg_group(parser, 'options arguments') as grp:
            __silent(grp)

    with subparser(sub_parsers, 'merge_logs', 'Replace last tree in Create a log fitting file by the original tree.') as parser:
        with arg_group(parser, 'required named arguments') as grp:
            __input_log(grp, required=True)
            __pruned_tree(grp, required=True)
            __output_log(grp,required=True)
        with arg_group(parser, 'options arguments') as grp:
            __silent(grp)

    with subparser(sub_parsers, 'hatchet_wf', 'Run the full workflow , from pick to red_low.') as parser:
        with arg_group(parser, 'required named arguments') as grp:
            __domain(grp, required=True)
            __ref_tree(grp,required=True)
            __ref_msa(grp,required=True)
            __taxonomy_file(grp, required=True)
            __output_dir(grp, required=True)
            __ref_red_file(grp, required=True)
        with arg_group(parser, 'options arguments') as grp:
            __silent(grp)
            __rank_of_interest(grp,required=False)
            __rank_to_split(grp, required=False)

    return main_parser



def main():
    # -------------------------------------------------
    # get and check options
    if len(sys.argv) == 1:
        print_help()
        sys.exit(0)
    elif sys.argv[1] in {'-v', '--v', '-version', '--version'}:
        print("hatchet: version %s %s %s" % (__version__,
                                                       __copyright__,
                                                       __author__))
        sys.exit(0)
    elif sys.argv[1] in {'-h', '--h', '-help', '--help'}:
        print_help()
        sys.exit(0)
    else:
        args = get_main_parser().parse_args()

        silent = False
        if hasattr(args, 'silent'):
            silent = args.silent

        try:
            make_sure_path_exists(args.output_dir)
            logger_setup(os.path.dirname(args.output_dir),
                         'hatchet.log',
                         'Hatchet',
                         __version__,
                         silent)
        except:
            logger_setup('.',
                         'hatchet.log',
                         'Hatchet',
                         __version__,
                         silent)

        # do what we came here to do
        try:
            parser = OptionsParser()
            if False:
                import cProfile

                cProfile.run('parser.parse_options(args)', 'prof')
            elif False:
                import pdb

                pdb.run(parser.parse_options(args))
            else:
                parser.parse_options(args)
        except SystemExit:
            print("\n  Controlled exit resulting from an unrecoverable error or warning.")
        except:
            print("\nUnexpected error:", sys.exc_info()[0])
            raise


if __name__ == '__main__':
    main()